---
title: "VCF File Cleaning Protocoll"
format: html
engine: knitr
params:
  input: "data/genotypes.vcf.gz"
  output: "output"
---


```{r}
# make params available as environment variables to bash cells
Sys.setenv(INPUT = params$input)
Sys.setenv(OUTPUT = params$output)
```

::: {.callout-note}
## Execution Information

- **Date**: `r Sys.Date()`
- **Username**: `r Sys.info()["user"]`
- **Machine**: `r Sys.info()["nodename"]`
:::


## 🔧 Step 1: Validate VCF File

```{bash}
mkdir -p output
md5sum "$INPUT" | tee $OUTPUT/00-input.md5
```


## 🧼 Step 2: Filter Variants by Quality using `bcftools`

Filter variants with a minimum QUAL score of 30 and remove low-quality genotypes (e.g., GQ < 20).

```{bash}
bcftools view -e 'GT="./."' "$INPUT" -Oz -o $OUTPUT/01-nomissing.vcf.gz
```

Then index the result:

```{bash}
bcftools index $OUTPUT/01-nomissing.vcf.gz
```



## 🚫 Step 3: Remove Indels

Some analyses may require only SNPs.

```{bash}
bcftools view -v snps $OUTPUT/01-nomissing.vcf.gz -Oz -o $OUTPUT/02-snps_only.vcf.gz
bcftools index $OUTPUT/02-snps_only.vcf.gz
```



## ✅ Step 4: Convert VCF to PLINK2 Format

You can convert a cleaned VCF to PLINK2 format for downstream QC or GWAS:

```{bash}
plink2 --vcf $OUTPUT/02-snps_only.vcf.gz --chr 1-22 --make-bed --out $OUTPUT/03-data_cleaned
```

This generates `.pgen`, `.pvar`, and `.psam` files.



## 🧽 Step 5: Further Filtering with PLINK2

Filter individuals or variants with too much missingness:

```{bash}
plink2 --bfile $OUTPUT/03-data_cleaned --geno 0.05 --mind 0.1 --make-bed --out $OUTPUT/04-qc_filtered
```

* `--geno 0.05`: remove variants with >5% missing
* `--mind 0.1`: remove individuals with >10% missing



## 📉 Step 6: MAF and HWE Filters

Apply allele frequency and Hardy-Weinberg Equilibrium filters:

```{bash}
plink2 --bfile $OUTPUT/04-qc_filtered --maf 0.01 --hwe 1e-6 --make-bed --out $OUTPUT/05-final_data
```



## 👨🏻‍💻 Summary

Statistics about the final dataset:

```{bash}
plink2 --bfile $OUTPUT/05-final_data --validate | grep -E "samples|variants"
```

Checksums:
```{bash}
md5sum $OUTPUT/05-final_data.* | tee $OUTPUT/00-input.md5
```